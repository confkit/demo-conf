name: "rust-cli-linux"
description: "Rust Server demo"

source:
  git_repo: "git@github.com:confkit/demo-rust.git"
  git_branch: "main"
  language: "rust"
  manifest_file: "Cargo.toml"

environment:
  # 自定义环境变量（基于内置变量）
  BUILD_TARGET_DIR: "target/release"

cleaner:
  workspace: false

steps:
  - name: "克隆项目"
    commands:
      - "echo 克隆项目"
      - "git clone ${GIT_REPO} -b main ${PROJECT_NAME}"
      - "chmod -R 777 ${PROJECT_NAME}"

  - name: "代码检查"
    container: "rust-builder-1.88"
    working_dir: "${CONTAINER_WORKSPACE_DIR}/${PROJECT_NAME}"
    commands:
      - "cargo fmt --check"
      - "cargo clippy --all-targets --all-features -- -D warnings"

  - name: "构建应用(linux.aarch64)"
    container: "rust-builder-1.88"
    working_dir: "${CONTAINER_WORKSPACE_DIR}/${PROJECT_NAME}"
    commands:
      - "cargo make build-linux"
      - "chmod 777 ./target"

  - name: "复制上传文件"
    working_dir: "${HOST_WORKSPACE_DIR}/${PROJECT_NAME}"
    commands:
      - "cp ./target/aarch64-unknown-linux-gnu/release/demo-rust ./target/demo-rust-aarch64-unknown-linux-gnu"
      - "cp ./target/x86_64-unknown-linux-gnu/release/demo-rust ./target/demo-rust-x86_64-unknown-linux-gnu"
      - "chmod 644 ./target/demo-rust-*"

  - name: "准备发布环境"
    container: "rust-builder-1.88"
    commands:
      - "echo 准备上传 Linux 构建文件到 GitHub Release v${PROJECT_VERSION}"
      - "echo Git Hash: ${GIT_HASH}"
      - "echo Build Date: $(date -Iseconds)"
      - "echo Task ID: ${TASK_ID}"

  - name: "上传文件到 GitHub Release"
    working_dir: "${HOST_WORKSPACE_DIR}/${PROJECT_NAME}"
    commands:
      - "echo 📤 上传 Linux ARM64 版本..."
      - "gh release upload v${PROJECT_VERSION} ./target/demo-rust-aarch64-unknown-linux-gnu --clobber"
      - "echo 📤 上传 Linux x86_64 版本..."
      - "gh release upload v${PROJECT_VERSION} ./target/demo-rust-x86_64-unknown-linux-gnu --clobber"
      - "echo ✅ 文件上传完成"
    continue_on_error: true
    timeout: "5m"

  - name: "验证发布结果"
    working_dir: "${HOST_WORKSPACE_DIR}/${PROJECT_NAME}"
    commands:
      - "echo 验证发布结果"
      - "gh release view v${PROJECT_VERSION} --json assets"
      - "echo ✅ 发布验证完成"
    continue_on_error: true
    timeout: "2m"

  - name: "移除 .git 目录"
    commands:
      - "rm -rf ${PROJECT_NAME}/.git"
